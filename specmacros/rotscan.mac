def rotscan '{
  global _fn _m _s _f _ctime _n1 _n2 _n3
  if ($# != 8) {
    eprint "Usage: rotscan filename motor start finish intervals time initial sum"
    exit
  }
  _fn = "$1"
  _check0 "$2"
  _m[0] = $2; _s[0] = $3; _f[0] = $4
  _n1 = int($5); _ctime = $6
  _n2 = int($7)
  _n3 = int($8)
  _nm = 1
  HEADING="rotscan $*"
  _rotscan
}'

def _rotscan '{
  global _n1 _m _s _f
  if (_n1 <= 0) {
    eprint "Intervals <= 0"
    exit
  }
  _bad_lim = 0
  _chk_lim _m[i] _s[i]
  _chk_lim _m[i] _f[i]
  if (_bad_lim) exit;
  X_L=motor_name(_m[0])
  Y_L=cnt_name(DET)
  _stype=1|(_nm<<8)
  _rotscan_prepare
  cdef("cleanup_once", "{ _rotscan_cleanup }", "_rotscan")
  FPRNT=sprintf("%s  ",motor_name(_m[0]))
  PPRNT=sprintf("%8.8s ", motor_name(_m[0]))
  VPRNT=sprintf("%9.9s ", motor_name(_m[0]))
  FPRNT=sprintf("%s%s  ",FPRNT,"Time")
  PPRNT=sprintf("%s%8.8s ", PPRNT, "Time")
  VPRNT=sprintf("%s%9.9s ", VPRNT, "Time")
  FPRNT=sprintf("%s%s  ",FPRNT,"DelTime")
  PPRNT=sprintf("%s%8.8s ", PPRNT, "DelTime")
  VPRNT=sprintf("%s%9.9s ", VPRNT, "DelTime")
  FPRNT=sprintf("%s%s  ",FPRNT,"Index")
  PPRNT=sprintf("%s%8.8s ", PPRNT, "Index")
  VPRNT=sprintf("%s%9.9s ", VPRNT, "Index")
  FPRNT=sprintf("%s%s  ",FPRNT,"Dropped")
  PPRNT=sprintf("%s%8.8s ", PPRNT, "Dropped")
  VPRNT=sprintf("%s%9.9s ", VPRNT, "Dropped")
  FPRNT=sprintf("%s%s  %s  %s  ",FPRNT,"H","K","L")
  PPRNT=sprintf("%s%s %s %s ",PPRNT,"H","K","L")
  VPRNT=sprintf("%s%s %s %s ",VPRNT,"H","K","L")
  _cols=8
  scan_head
  _rotscan_move_start
  _rotscan_start_detector()
  PFMT=sprintf("%%s%%8.%df ", UP)
  VFMT=sprintf("%%s%%9.%df ", UP)
  def _scan_on \'{
    for(; ; NPTS++) {
      local dt
      if (NPTS==_n2*_n3) _rotscan_scan_motor
      get_angles; calcHKL
      _time = time()
      dt = _rotscan_check_detector()
      FPRNT=sprintf("%s%.8g ","",A[_m[0]])
      PPRNT=sprintf(PFMT,"",A[_m[0]])
      VPRNT=sprintf(VFMT,"",A[_m[0]])
      FPRNT=sprintf("%s%0.6f ", FPRNT, _time)
      FPRNT=sprintf("%s%0.6f ", FPRNT, dt[0] - _time)
      FPRNT=sprintf("%s%d ", FPRNT, dt[1])
      FPRNT=sprintf("%s%d ", FPRNT, dt[3])
      FPRNT=sprintf("%s%10.5g %10.5g %10.5g ", FPRNT, H, K, L)
      VPRNT=sprintf("%s%0.6f %0.6f %d %d %6.5g %6.5g %6.5g ", VPRNT, _time, dt[0]-_time, dt[1], dt[3], H, K, L)
      scan_loop
      scan_data(NPTS, A[_m[0]])
      scan_plot
      if (dt[2]) break
    }
    scan_tail
  }\'
  _scan_on
  cdef("cleanup_once", "", "_rotscan", "delete")
  _rotscan_cleanup
}'

def _rotscan_cleanup '{
  global _v0 _m _s
  stop()
  waitmove
  _rotscan_stop_detector()
  motor_par(_m[0], "velocity", _v0)
#  printf("Returning %s to %g\n", motor_mne(_m[0]), _s[0])
#  get_angles
#  A[_m[0]] = _s[0]
#  _move
}'

def _rotscan_prepare '{
  global _v0 _v _n0 _n1 _n3 
  _v0 = motor_par(_m[0], "velocity")
  _v  = motor_par(_m[0], "step_size")*fabs(_f[0] - _s[0])/(_n1*_ctime*_n3)
  printf ("Motor %s standard vel: %g steps/sec, rotscan vel: %g steps/sec\n", motor_mne(_m[0]), _v0, _v)
  if (_v > _v0) {
    eprint "Requested motor velocity for scan would be too fast"
    exit
  }
}'

def _rotscan_move_start '{
  global _v _m _s
  printf("Move %s to %g at full speed\n", motor_mne(_m[0]), _s[0])
  get_angles
  A[_m[0]] = _s[0]
  _move
  waitmove
  motor_par(_m[0], "velocity", _v)
}'

def _rotscan_scan_motor '{
  global _m _f
  printf("Scan %s to %g at scanning speed\n", motor_mne(_m[0]), _f[0])
  get_angles
  A[_m[0]] = _f[0]
  move_em
}'

def rotscan_setup '{
}'

def rotscan_remove '{
  if (yesno("Remove rotscan and related macros",0)) {
    undef rotscan rotscan_setup rotscan_remove _rotscan
  }
}'

def oldcount '{
def count \'{
	waitmove
	if (\$1) for (;;) {
		count_em \$1
		waitcount
		get_counts
		chk_beam
	}
	if (S[sec] && MON >= 0)
		MON_RATE=S[MON]/S[sec]
}\'
}'

def rotscan_count '{
def count \'{
	if (\$1) for (;;) {
		count_em \$1
		waitcount
		get_counts
		chk_beam
	}
	if (S[sec] && MON >= 0)
		MON_RATE=S[MON]/S[sec]
}\'
}'



